<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="customSqlQuery1.Sql" xml:space="preserve">
    <value>--DECLARE @ParamId AS INT
--DECLARE @WithRemarks BIT
--DECLARE @ParamInActive BIT
--DECLARE @EmployeeFilter VARCHAR(100)

---- Sample values as provided in your request
--SET @ParamId = 13
--SET @WithRemarks = 0
--SET @ParamInActive = 0
--SET @EmployeeFilter = 'ALBARAN' -- Example employee filter

SELECT 
    TrnDTRLine.DTRId, 
    TrnDTR.DTRNumber, 
    TrnDTR.DateStart, 
    TrnDTR.DateEnd, 
    TrnDTR.Remarks, 
    MstDepartment.Department, 
    MstPosition.Position, 
    TrnDTRLine.EmployeeId, 
    MstEmployee.FullName, 
    TrnDTRLine.Date, 
    TrnDTRLine.TimeIn1, 
    TrnDTRLine.TimeOut1, 
    TrnDTRLine.TimeIn2, 
    TrnDTRLine.TimeOut2, 
    TrnDTRLine.OfficialBusiness, 
    TrnDTRLine.OnLeave, 
    TrnDTRLine.Absent, 
    TrnDTRLine.RegularHours, 
    ShiftTimeCalc.ShiftTimeIn1,
    -- Calculate variance in decimal hours (TotalMinutes is variance from 540 minutes, capped at 0)
    calc.TotalMinutes / 60.0 AS VarianceDecimal,
    -- Convert TotalMinutes (variance, capped at 0) to H:M format
    CAST(calc.TotalMinutes / 60 AS VARCHAR(10)) + 'H:' +
    RIGHT('00' + CAST(calc.TotalMinutes % 60 AS VARCHAR(10)), 2) + 'M' AS Variance,
    TrnDTRLine.NightHours, 
    TrnDTRLine.OvertimeHours, 
    TrnDTRLine.OvertimeNightHours, 
    TrnDTRLine.GrossTotalHours, 
    TrnDTRLine.TardyLateHours, 
    TrnDTRLine.TardyUndertimeHours, 
    TrnDTRLine.NetTotalHours, 
    TrnDTRLine.DayTypeId, 
    MstDayType.DayType, 
    TrnDTRLine.RestDay,
    TrnDTRLine.DTRRemarks
FROM TrnDTRLine
INNER JOIN MstEmployee ON TrnDTRLine.EmployeeId = MstEmployee.Id 
INNER JOIN TrnDTR ON TrnDTRLine.DTRId = TrnDTR.Id
INNER JOIN MstDayType ON TrnDTRLine.DayTypeId = MstDayType.Id
INNER JOIN MstPosition ON MstEmployee.PositionId = MstPosition.Id
INNER JOIN MstDepartment ON MstEmployee.DepartmentId = MstDepartment.Id
-- Safely extract ShiftTimeIn1 using CROSS APPLY
CROSS APPLY (
    SELECT CASE 
        WHEN TrnDTRLine.ShiftDates IS NULL OR CHARINDEX(',', TrnDTRLine.ShiftDates) = 0 
            THEN TrnDTRLine.TimeIn1 -- Fallback if ShiftDates is not usable
        ELSE LTRIM(RTRIM(SUBSTRING(
            TrnDTRLine.ShiftDates, 
            1, 
            CHARINDEX(',', TrnDTRLine.ShiftDates) - 1
        )))
    END AS ShiftTimeIn1
) AS ShiftTimeCalc
-- Calculate the actual gross worked minutes based on available time entries
CROSS APPLY (
    SELECT 
        CASE
            -- Scenario: TimeIn1 and TimeOut2 exist, but TimeOut1 and TimeIn2 are NULL.
            -- This implies a single continuous work period from TimeIn1 to TimeOut2.
            WHEN TrnDTRLine.TimeIn1 IS NOT NULL AND TrnDTRLine.TimeOut1 IS NULL AND
                 TrnDTRLine.TimeIn2 IS NULL AND TrnDTRLine.TimeOut2 IS NOT NULL THEN
                DATEDIFF(MINUTE, TrnDTRLine.TimeIn1, TrnDTRLine.TimeOut2)

            -- Original logic: sum of two periods.
            -- DATEDIFF returns NULL if any of its time arguments are NULL.
            -- ISNULL converts these NULLs to 0, so incomplete pairs contribute 0 minutes.
            ELSE
                ISNULL(DATEDIFF(MINUTE, TrnDTRLine.TimeIn1, TrnDTRLine.TimeOut1), 0) +
                ISNULL(DATEDIFF(MINUTE, TrnDTRLine.TimeIn2, TrnDTRLine.TimeOut2), 0)
        END AS ActualGrossWorkedMinutes
) AS GrossTimeCalc
-- Calculate the variance from 540 minutes (9 hours), ensuring it's not negative
CROSS APPLY (
    SELECT 
        CASE 
            WHEN GrossTimeCalc.ActualGrossWorkedMinutes &lt; 540 THEN 0 -- If worked less than 9 hours, variance is 0
            ELSE GrossTimeCalc.ActualGrossWorkedMinutes - 540 -- Otherwise, calculate the positive variance
        END AS TotalMinutes
) AS calc
WHERE TrnDTR.Id = @ParamId 
    AND MstEmployee.FullName LIKE '%' + ISNULL(NULLIF(@EmployeeFilter, ''), 'XXXX') + '%' -- Using XXXX as a non-matching placeholder if @EmployeeFilter is effectively empty
    AND (@WithRemarks = 0 OR (TrnDTRLine.DTRRemarks IS NOT NULL AND TrnDTRLine.DTRRemarks &lt;&gt; ''))
    AND (@ParamInActive = 0 OR TrnDTRLine.DTRRemarks = 'In-Active')
    AND EXISTS ( -- Ensures the employee has at least one time entry for this DTR
        SELECT 1
        FROM dbo.TrnDTRLine AS dtr 
        WHERE (dtr.TimeIn1 IS NOT NULL 
               OR dtr.TimeOut1 IS NOT NULL 
               OR dtr.TimeIn2 IS NOT NULL 
               OR dtr.TimeOut2 IS NOT NULL)
          AND dtr.DTRId = @ParamId 
          AND dtr.EmployeeId = TrnDTRLine.EmployeeId
    )
ORDER BY MstEmployee.FullName;</value>
  </data>
  <data name="sqlDataSource1.ResultSchemaSerializable" xml:space="preserve">
    <value>PERhdGFTZXQgTmFtZT0ic3FsRGF0YVNvdXJjZTEiPjxWaWV3IE5hbWU9IlF1ZXJ5Ij48RmllbGQgTmFtZT0iRFRSSWQiIFR5cGU9IkludDMyIiAvPjxGaWVsZCBOYW1lPSJEVFJOdW1iZXIiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iRGF0ZVN0YXJ0IiBUeXBlPSJEYXRlVGltZSIgLz48RmllbGQgTmFtZT0iRGF0ZUVuZCIgVHlwZT0iRGF0ZVRpbWUiIC8+PEZpZWxkIE5hbWU9IlJlbWFya3MiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iRGVwYXJ0bWVudCIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJQb3NpdGlvbiIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJFbXBsb3llZUlkIiBUeXBlPSJJbnQzMiIgLz48RmllbGQgTmFtZT0iRnVsbE5hbWUiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iRGF0ZSIgVHlwZT0iRGF0ZVRpbWUiIC8+PEZpZWxkIE5hbWU9IlRpbWVJbjEiIFR5cGU9IkRhdGVUaW1lIiAvPjxGaWVsZCBOYW1lPSJUaW1lT3V0MSIgVHlwZT0iRGF0ZVRpbWUiIC8+PEZpZWxkIE5hbWU9IlRpbWVJbjIiIFR5cGU9IkRhdGVUaW1lIiAvPjxGaWVsZCBOYW1lPSJUaW1lT3V0MiIgVHlwZT0iRGF0ZVRpbWUiIC8+PEZpZWxkIE5hbWU9Ik9mZmljaWFsQnVzaW5lc3MiIFR5cGU9IkJvb2xlYW4iIC8+PEZpZWxkIE5hbWU9Ik9uTGVhdmUiIFR5cGU9IkJvb2xlYW4iIC8+PEZpZWxkIE5hbWU9IkFic2VudCIgVHlwZT0iQm9vbGVhbiIgLz48RmllbGQgTmFtZT0iUmVndWxhckhvdXJzIiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJTaGlmdFRpbWVJbjEiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iVmFyaWFuY2VEZWNpbWFsIiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJWYXJpYW5jZSIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJOaWdodEhvdXJzIiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJPdmVydGltZUhvdXJzIiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJPdmVydGltZU5pZ2h0SG91cnMiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9Ikdyb3NzVG90YWxIb3VycyIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iVGFyZHlMYXRlSG91cnMiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IlRhcmR5VW5kZXJ0aW1lSG91cnMiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9Ik5ldFRvdGFsSG91cnMiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IkRheVR5cGVJZCIgVHlwZT0iSW50MzIiIC8+PEZpZWxkIE5hbWU9IkRheVR5cGUiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iUmVzdERheSIgVHlwZT0iQm9vbGVhbiIgLz48RmllbGQgTmFtZT0iRFRSUmVtYXJrcyIgVHlwZT0iU3RyaW5nIiAvPjwvVmlldz48L0RhdGFTZXQ+</value>
  </data>
</root>